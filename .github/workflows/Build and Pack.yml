name: Build and Pack

# Controls when the workflow will run
on:
  push:
    branches:
      - Main
    paths:
      - "MyFoxSitesGenerator/**"
  pull_request:
    types: [closed]
    branches:
      - Main
    paths:
      - "MyFoxSitesGenerator/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  Packaging:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Insert Required Modules
        working-directory: ./MyFoxSitesGenerator
        run: |
          $Modules=Import-Csv -Path .\Modules\PlaceHolderForModules.csv
          Foreach ($Module in $Modules){
          $Module=$Module -replace '@{Modules=','' -replace '}',''
          Write-Output -InputObject "Saving $Module"
          Find-module -Name $Module  | Save-Module -Path .\Modules
          $null= test-path -path .\Modules\$Module | foreach-object {Write-Host "Verifying Module was saved successfully: $_"
          if ($_ -eq $false){exit 1}}}
        shell: pwsh

      - name: Compile EXE
        env:
            Hotfix: ${{ GITHUB.RUN_NUMBER }}
        working-directory: .
        run: |
          'Setting Version Number'
          $MainVersion=1
          $SubVersion=0
          [String]$Version="$MainVersion.$SubVersion.$env:Hotfix"
          "Version is $Version"
          'Installing Module PS2EXE'
          Install-Module -Name ps2exe -force
          'Impoting Module PS2EXE'
          import-module -Name ps2exe
          'Creating EXE'
          Invoke-PS2EXE -inputFile .\MyFoxSitesGenerator\Generator.ps1 -outputFile .\MyFoxSitesGenerator\MyFoxSites_Generator.exe -iconFile .\ExternalResources\Icon\Favicon.ico  -title 'My Fox Sites Generator.exe' -version $Version -requireAdmin -x64 -company 'Britannica Knowledge Systems' -copyright 'Elior Machlev' -description 'Get Information About Your Fox sites' -credentialGUI -Verbose -ErrorAction Stop
          $null= test-path -path ".\MyFoxSitesGenerator\MyFoxSites_Generator.exe" | foreach-object {Write-Host "Verifying EXE was created successfully: $_"
          if ($_ -eq $false){exit}}
        shell: powershell

      - name: Create Zip
        working-directory: .
        run: |
          'Compressing to Zip File'
          Compress-Archive -Path .\MyFoxSitesGenerator -DestinationPath .\MyFoxSitesGenerator.zip -CompressionLevel Optimal
          $null=  test-path -path .\MyFoxSitesGenerator.zip | foreach-object {Write-Host "Verifying Zip was created successfully: $_"
          if ($_ -eq $false){exit}}
        shell: pwsh

      - name: Upload Release to Github Repository
        env:
         UPLOADKEY: ${{ secrets.UPLOADKEY }}
         Hotfix: ${{ GITHUB.RUN_NUMBER }}
         WorkflowLog: ${{ GITHUB.RUN_ID }}
        working-directory: .
        run: |
          'Installing New-GitHubRelease module'
          Install-Module -Name New-GitHubRelease -Force
          'Importing Module New-GitHubRelease'
          Import-Module -Name New-GitHubRelease
          'Start upload sequence'
          $MainVersion=1
          $SubVersion=0
          [String]$Version="$MainVersion.$SubVersion.$env:Hotfix"
          $Path2Zip=((Get-Location).ToString()) + '\MyFoxSitesGenerator.zip'
          [string]$Body='**Full Changelog**: [Release Notes](https://github.com/BaTarrY/MyFoxSites/compare/Prerelease...Release)' + "`n" + "Workflow log: [$env:WorkflowLog]" + '(https://github.com/BaTarrY/MyFoxSites/actions/runs/' + $env:WorkflowLog + ')'
          $newGitHubReleaseParameters = @{
              GitHubUsername = 'BaTarrY'
              GitHubRepositoryName = 'MyFoxSites'
              GitHubAccessToken = "$env:UPLOADKEY"
              ReleaseName = "My Fox Sites Generator v$Version"
              TagName = $Version
              ReleaseNotes = $Body
              AssetFilePaths = @($Path2Zip)
              IsPreRelease = $false
              IsDraft = $false
          }
          'Upload the Release to GitHub and check the results'
          $result = New-GitHubRelease @newGitHubReleaseParameters
          # Provide some feedback to the user based on the results.
          if ($result.Succeeded -eq $true)
          {
              Write-Output "Release published successfully! View it at $($result.ReleaseUrl)"
          }
          elseif ($result.ReleaseCreationSucceeded -eq $false)
          {
              Write-Error "The release was not created. Error message is: $($result.ErrorMessage)"
          }
          elseif ($result.AllAssetUploadsSucceeded -eq $false)
          {
              Write-Error "The release was created, but not all of the assets were uploaded to it. View it at $($result.ReleaseUrl). Error message is: $($result.ErrorMessage)"
          }
        shell: pwsh